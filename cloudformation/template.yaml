AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template to fetch data for TLC

Parameters:
  URL:
    Type: String
    Default: https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page
  RedshiftDBName:
    Type: String
    Default: nyc_tlc_db
  RedshiftWorkgroupName:
    Type: String
    Default: nyc-tlc-workgroup
  RedshiftNamespaceName:
    Type: String
    Default: nyc-tlc-namespace

Globals:
  Function:
    Runtime: python3.11
    Architectures:
      - arm64
    LoggingConfig:
      LogFormat: JSON

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nyc-tlc-data-lake
      VersioningConfiguration:
        Status: Suspended

  RedshiftStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./redshift.yaml
      Parameters: 
        S3BucketName: !Ref S3Bucket
        RedshiftDBName: !Ref RedshiftDBName
        RedshiftWorkgroupName: !Ref RedshiftWorkgroupName
        RedshiftNamespaceName: !Ref RedshiftNamespaceName

  FetchDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-fetch_data"
      CodeUri: ../lambda/fetch_data
      Handler: function.lambda_handler
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          bucket_name: !Ref S3Bucket
          url: !Ref URL
          ssm_month_var: !Ref NextMonth
          ssm_year_var: !Ref NextYear
      Policies:
        - Statement:
          - Effect: 'Allow'
            Action:
              - s3:PutObject
              - ssm:PutParameter
            Resource:
              - !Sub 'arn:aws:s3:::${S3Bucket}/raw/*'
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${NextMonth}'
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${NextYear}'

  CleanDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-clean_data"
      CodeUri: ../lambda/clean_data
      Handler: function.lambda_handler
      Timeout: 60
      MemorySize: 1024
      Environment:
        Variables:
          bucket_name: !Ref S3Bucket
      Policies:
        - Statement:
          - Effect: 'Allow'
            Action:
              - s3:ListBucket
              - s3:ListBucketVersions
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}'
          - Effect: 'Allow'
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/raw/*'
          - Effect: 'Allow'
            Action:
              - s3:DeleteObject
              - s3:PutObject
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/cleaned/*'

  UploadDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-upload_data"
      CodeUri: ../lambda/upload_data
      Handler: function.lambda_handler
      Timeout: 90
      MemorySize: 256
      Environment:
        Variables:
          redshift_db: !Ref RedshiftDBName
          workgroup_name: !Ref RedshiftWorkgroupName
          iam_role_arn: !GetAtt RedshiftStack.Outputs.RedshiftIAMRoleArn
          secret_arn: !GetAtt RedshiftStack.Outputs.DBSecretArn
      Policies:
        - Statement:
          - Effect: 'Allow'
            Action:
              - s3:ListBucket
              - s3:GetObject
            Resource:
              - !Sub 'arn:aws:s3:::${S3Bucket}'
              - !Sub 'arn:aws:s3:::${S3Bucket}/cleaned/*'
          - Effect: 'Allow'
            Action:
              - iam:PassRole
              - secretsmanager:GetSecretValue
            Resource:
              - !GetAtt RedshiftStack.Outputs.RedshiftIAMRoleArn
              - !GetAtt RedshiftStack.Outputs.DBSecretArn
        - Statement:
          - Effect: 'Allow'
            Action:
              - redshift-data:ExecuteStatement
              - redshift-serverless:GetCredentials
            Resource:
              - !GetAtt RedshiftStack.Outputs.WorkgroupArn
              - !GetAtt RedshiftStack.Outputs.NamespaceArn
          - Effect: 'Allow'
            Action:
              - redshift-data:DescribeStatement
            Resource: '*'

  ExecuteSetupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-execute_setup"
      CodeUri: ../lambda/execute_setup
      Handler: function.lambda_handler
      Timeout: 90
      MemorySize: 128
      Environment:
        Variables:
          redshift_db: !Ref RedshiftDBName
          workgroup_name: !Ref RedshiftWorkgroupName
          iam_role_arn: !GetAtt RedshiftStack.Outputs.RedshiftIAMRoleArn
          secret_arn: !GetAtt RedshiftStack.Outputs.DBSecretArn
          bucket_name: !Ref S3Bucket
          parameter_name: !Sub '/${AWS::StackName}/DevPassword'
      Policies:
        - Statement:
          - Effect: 'Allow'
            Action:
              - s3:PutObject
              - ssm:PutParameter
            Resource:
              - !Sub 'arn:aws:s3:::${S3Bucket}/*'
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/DevPassword'
          - Effect: 'Allow'
            Action:
              - iam:PassRole
              - secretsmanager:GetSecretValue
            Resource:
              - !GetAtt RedshiftStack.Outputs.RedshiftIAMRoleArn
              - !GetAtt RedshiftStack.Outputs.DBSecretArn
        - Statement:
          - Effect: 'Allow'
            Action:
              - redshift-data:ExecuteStatement
              - redshift-serverless:GetCredentials
            Resource:
              - !GetAtt RedshiftStack.Outputs.WorkgroupArn
              - !GetAtt RedshiftStack.Outputs.NamespaceArn
          - Effect: 'Allow'
            Action:
              - redshift-data:DescribeStatement
            Resource: '*'

  ExecuteCleanupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-execute_cleanup"
      CodeUri: ../lambda/execute_cleanup
      Handler: function.lambda_handler
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          bucket_name: !Ref S3Bucket
          parameter_name: !Sub '/${AWS::StackName}/DevPassword'
      Policies:
        - Statement:
          - Effect: 'Allow'
            Action:
              - s3:ListBucket
              - s3:DeleteObjectVersion
            Resource: 
              - !Sub 'arn:aws:s3:::${S3Bucket}'
              - !Sub 'arn:aws:s3:::${S3Bucket}/*'
          - Effect: 'Allow'
            Action: ssm:DeleteParameter
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/DevPassword'

  StepFunctionsStack:
    Type: AWS::Serverless::Application
    Properties: 
      Location: ./stepfunctions.yaml
      Parameters: 
        FetchDataFunctionArn: !GetAtt FetchDataFunction.Arn
        CleanDataFunctionArn: !GetAtt CleanDataFunction.Arn
        UploadDataFunctionArn: !GetAtt UploadDataFunction.Arn
        NextMonthPath: !Ref NextMonth
        NextYearPath: !Ref NextYear
        
  NextMonth:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Sub '/${AWS::StackName}/NextMonth'
      Type: 'String'
      Value: '1'

  NextYear:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Sub '/${AWS::StackName}/NextYear'
      Type: 'String'
      Value: '2024'

  ExecuteCleanupCustomResource:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt ExecuteCleanupFunction.Arn
      ServiceTimeout: 30

  ExecuteSetupCustomResource:
    Type: 'AWS::CloudFormation::CustomResource'
    DependsOn: RedshiftStack
    Properties:
      ServiceToken: !GetAtt ExecuteSetupFunction.Arn
      ServiceTimeout: 90